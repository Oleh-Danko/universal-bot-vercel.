import os
import asyncio
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from live_parser import fetch_epravda_finances  # <-- —Ç—ñ–ª—å–∫–∏ epravda

# ====== –õ–û–ì–ò ======
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("news-bot")

# ====== ENV ======
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
WEBHOOK_BASE = os.environ.get("WEBHOOK_URL")  # —Ç–∏–ø—É: https://universal-bot-live.onrender.com

if not BOT_TOKEN or not WEBHOOK_BASE:
    raise RuntimeError("BOT_TOKEN —ñ WEBHOOK_URL –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤ Environment.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# ====== BOT/DP ======
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ====== –•–ï–ù–î–õ–ï–†–ò ======
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /news ‚Äî –æ—Ç—Ä–∏–º–∞—î—à –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ –ï–∫–æ–Ω–æ–º—ñ—á–Ω–æ—ó –ü—Ä–∞–≤–¥–∏ (—Ä–æ–∑–¥—ñ–ª ¬´–§—ñ–Ω–∞–Ω—Å–∏¬ª).")

@dp.message(Command("news"))
async def cmd_news(message: Message):
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é –Ω–æ–≤–∏–Ω–∏ –∑ Epravda /finances ‚Ä¶")

    try:
        items = await fetch_epravda_finances()  # —Ç—ñ–ª—å–∫–∏ epravda /finances
        if not items:
            await message.answer("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ –Ω–æ–≤–∏–Ω –Ω–∞ epravda /finances. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")
            return

        # –ì—Ä—É–ø—É—î–º–æ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º "Epravda (Finances)"
        lines = []
        for it in items:
            title = it.get("title", "").strip()
            link = it.get("link", "").strip()
            desc = it.get("desc", "").strip()
            if desc:
                lines.append(f"‚Ä¢ <a href=\"{link}\">{title}</a> ‚Äî {desc}")
            else:
                lines.append(f"‚Ä¢ <a href=\"{link}\">{title}</a>")

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ–± –Ω–µ –≤–ø–µ—Ä—Ç–∏—Å—è –≤ –ª—ñ–º—ñ—Ç 4096 —Å–∏–º–≤–æ–ª—ñ–≤
        header = "<b>Epravda (Finances)</b>\n"
        chunk = header
        for line in lines:
            if len(chunk) + len(line) + 1 > 3900:
                await message.answer(chunk, disable_web_page_preview=True)
                chunk = header
            chunk += line + "\n"
        if chunk.strip():
            await message.answer(chunk, disable_web_page_preview=True)

    except Exception as e:
        log.exception("news handler error")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")

# ====== HEALTHZ ======
async def handle_health(request):
    return web.Response(text="OK", status=200)

# ====== START/STOP HOOKS ======
async def on_startup(app: web.Application):
    log.info(f"üåê Starting bot, setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    log.info("‚úÖ Webhook set successfully")

async def on_shutdown(app: web.Application):
    log.info("üîª Deleting webhook & closing session‚Ä¶")
    await bot.delete_webhook()
    await bot.session.close()
    log.info("‚úÖ Shutdown complete")

# ====== MAIN (AIOHTTP APP) ======
def main():
    app = web.Application()

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.router.add_get("/", handle_health)
    app.router.add_get("/healthz", handle_health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.environ.get("PORT", "10000"))
    log.info(f"üöÄ Starting web server on 0.0.0.0:{port}")
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()