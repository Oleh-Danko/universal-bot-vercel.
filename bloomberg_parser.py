import os
import asyncio
import logging
import requests
from bs4 import BeautifulSoup

# --- –û–ø—Ü—ñ–π–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ ---
try:
    import cloudscraper
except ImportError:
    cloudscraper = None

try:
    from playwright.async_api import async_playwright
except ImportError:
    async_playwright = None

from aiogram import Bot

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
URL = "https://www.bloomberg.com/markets"

HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/123.0.0.0 Safari/537.36"
    ),
    "Accept-Language": "en-US,en;q=0.9",
    "Referer": "https://www.google.com/",
    "DNT": "1",
}

# --- –õ–æ–≥–µ—Ä ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("BloombergParser")

# --- –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç Bot (—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è, —è–∫—â–æ —Ç–æ–∫–µ–Ω —î) ---
# üîë –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –±–µ—Ä—É—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó send_admin_alert
# –í–ò–î–ê–õ–ï–ù–û: BOT_TOKEN = os.getenv("TOKEN") 
# –í–ò–î–ê–õ–ï–ù–û: bot = Bot(token=BOT_TOKEN) 
# ---

async def send_admin_alert(text: str):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É —É Telegram."""
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ, —â–æ–± –Ω–µ –±—É–ª–æ NoneType –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
    ADMIN_ID = os.getenv("ADMIN_ID") 
    BOT_TOKEN = os.getenv("TOKEN")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Bot —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç–æ–∫–µ–Ω
    if BOT_TOKEN and ADMIN_ID:
        try:
            temp_bot = Bot(token=BOT_TOKEN)
            await temp_bot.send_message(chat_id=ADMIN_ID, text=f"‚ö†Ô∏è [Bloomberg Parser]\n{text}")
            await temp_bot.session.close() # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—é –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ª–æ–≥—É –∞–¥–º—ñ–Ω—É: {e}")
    else:
        logger.warning("ADMIN_ID –∞–±–æ TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äì –ª–æ–≥ —É Telegram –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")


async def fetch_bloomberg():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –æ—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –Ω–æ–≤–∏–Ω Bloomberg."""
    html = await _get_html()
    if not html:
        await send_admin_alert("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ HTML Bloomberg (—É—Å—ñ –º–µ—Ç–æ–¥–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è).")
        # –¢–£–¢ –¢–ï–ñ –ü–†–ò–ë–†–ê–ù–û raise Exception, —â–æ–± –Ω–µ –±—É–ª–æ –∑–±–æ—é –≤—Å—ñ—î—ó –ø—Ä–æ–≥—Ä–∞–º–∏
        return []

    # –õ–æ–≥—ñ–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: —à—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ <h3>
    soup = BeautifulSoup(html, "html.parser")
    # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –¥–æ–≤–∂–∏–Ω–∏, —â–æ–± –Ω–µ –∑–∞—Ö–æ–ø–∏—Ç–∏ –ø—É—Å—Ç—ñ —Ç–µ–≥–∏
    titles = [t.get_text(strip=True) for t in soup.select("h3") if len(t.get_text(strip=True)) > 20][:10] 
    
    if not titles:
        await send_admin_alert("‚ö†Ô∏è HTML –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–π–º–æ–≤—ñ—Ä–Ω–æ –∑–º—ñ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç—É).")
    return titles


async def _get_html():
    """–ü—Ä–æ–±—É—î –ø–æ —á–µ—Ä–∑—ñ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–æ—Å—Ç—É–ø—É."""
    # --- 1Ô∏è‚É£ requests (–ü—Ä–æ—Å—Ç–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è User-Agent) ---
    try:
        logger.info("‚û°Ô∏è –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ requests...")
        resp = requests.get(URL, headers=HEADERS, timeout=10)
        if resp.status_code == 200:
            return resp.text
        else:
            await send_admin_alert(f"‚ö†Ô∏è requests –ø–æ–≤–µ—Ä–Ω—É–≤ {resp.status_code}")
            logger.warning(f"requests ‚Üí {resp.status_code}")
    except Exception as e:
        logger.error(f"requests error: {e}")
        await send_admin_alert(f"‚ùå requests error: {e}")

    # --- 2Ô∏è‚É£ cloudscraper (–û–±—Ö—ñ–¥ Cloudflare) ---
    if cloudscraper:
        try:
            logger.info("‚û°Ô∏è –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ cloudscraper...")
            scraper = cloudscraper.create_scraper(browser={"browser": "chrome", "platform": "windows"})
            resp = scraper.get(URL, timeout=15)
            if resp.status_code == 200:
                return resp.text
            else:
                await send_admin_alert(f"‚ö†Ô∏è cloudscraper –ø–æ–≤–µ—Ä–Ω—É–≤ {resp.status_code}")
                logger.warning(f"cloudscraper ‚Üí {resp.status_code}")
        except Exception as e:
            logger.error(f"cloudscraper error: {e}")
            await send_admin_alert(f"‚ùå cloudscraper error: {e}")
    else:
        logger.warning("cloudscraper –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        await send_admin_alert("‚ÑπÔ∏è cloudscraper –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ.")

    # --- 3Ô∏è‚É£ Playwright (–ë–µ–∑–≥–æ–ª–æ–≤–∏–π –±—Ä–∞—É–∑–µ—Ä) ---
    if async_playwright:
        try:
            logger.info("‚û°Ô∏è –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ Playwright...")
            # Playwright –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                page = await browser.new_page(extra_http_headers=HEADERS) # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—é–¥–∏
                await page.goto(URL, timeout=30000)
                html = await page.content()
                await browser.close()
                return html
        except Exception as e:
            logger.error(f"playwright error: {e}")
            await send_admin_alert(f"‚ùå Playwright error: {e}")
    else:
        logger.warning("playwright –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        await send_admin_alert("‚ÑπÔ∏è Playwright –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ.")

    return None