    "https://techcrunch.com/",import os
import json
import logging
from urllib.parse import urlencode

import requests
from bs4 import BeautifulSoup
from telegram import Update

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
# –¢–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Vercel
BOT_TOKEN = os.environ.get("BOT_TOKEN") 
TELEGRAM_URL = f'https://api.telegram.org/bot{BOT_TOKEN}/'

# --- –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω (—Ç–∞ –∂, —â–æ –π —Ä–∞–Ω—ñ—à–µ) ---
def search_and_format_news(query="—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–≤–∏–Ω–∏", count=5):
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω Google —ñ —Ñ–æ—Ä–º–∞—Ç—É—î —ó—Ö."""

    params = {'q': query, 'hl': 'uk', 'gl': 'UA', 'ceid': 'UA:uk', 'tbm': 'nws'}
    google_url = f'https://www.google.com/search?{urlencode(params)}'

    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(google_url, headers=headers)
        response.raise_for_status() 

        soup = BeautifulSoup(response.content, 'html.parser')

        # –®—É–∫–∞—î–º–æ –±–ª–æ–∫–∏ –Ω–æ–≤–∏–Ω
        news_blocks = soup.find_all('div', class_='xUVHie') or soup.find_all('div', class_='SoaQtd') 

        news_list = []

        for block in news_blocks[:count]:
            link_tag = block.find('a', class_='WlydOe')
            title_tag = block.find('div', class_='BNeawe vvV-b')
            source_tag = block.find('div', class_='BNeawe UPmitb')

            if link_tag and title_tag and source_tag:
                title = title_tag.get_text()
                link = link_tag['href']
                source = source_tag.get_text().split(' ¬∑ ')[0]
                news_list.append(f"*{title}*\n–î–∂–µ—Ä–µ–ª–æ: {source}\n[–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ]({link})\n")

        if not news_list:
             return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω."

        return "üóûÔ∏è **–û—Å—å —Å–≤—ñ–∂—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–≤–∏–Ω–∏:**\n\n" + "\n".join(news_list)

    except requests.exceptions.RequestException as e:
        logging.error(f"Google Request Error: {e}")
        return "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ Google."
    except Exception as e:
        logging.error(f"Parsing Error: {e}")
        return "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É."

# --- –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Telegram ---
def send_telegram_response(chat_id, text):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–∑–∞–¥ —É Telegram API."""
    url = TELEGRAM_URL + 'sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    requests.post(url, json=payload)

# --- –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å ---
def handle_update(update_json):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω–∏–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (Update) –≤—ñ–¥ Telegram."""

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é Update.de_json –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
    update = Update.de_json(update_json, None) 

    if update.message and update.message.text:
        text = update.message.text
        chat_id = update.message.chat_id

        response_text = ""

        if text == '/start':
            response_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π Telegram-–±–æ—Ç –¥–ª—è –Ω–æ–≤–∏–Ω. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏."
        elif text == '/news':
            response_text = search_and_format_news()
        else:
            response_text = "–í–∏–±–∞—á—Ç–µ, —è —Ä–æ–∑—É–º—ñ—é –ª–∏—à–µ –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /news."

        send_telegram_response(chat_id, response_text)

    return "ok" 

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è Vercel (Serverless Entry Point) ---
def handler(event, context):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫, —è–∫—É –≤–∏–∫–ª–∏–∫–∞—î Vercel –ø—Ä–∏ Webhook-–∑–∞–ø–∏—Ç—ñ.
    """
    if 'body' in event and event['httpMethod'] == 'POST':
        try:
            update_json = json.loads(event['body'])
            handle_update(update_json)
            return {
                'statusCode': 200,
                'body': json.dumps({'status': 'processed'})
            }
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
            return {
                'statusCode': 500,
                'body': json.dumps({'error': str(e)})
            }

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ GET-–∑–∞–ø–∏—Ç (–ø—Ä–∏ –ø—Ä—è–º–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ URL)
    return {
        'statusCode': 200,
        'body': json.dumps({'message': '–ë–æ—Ç –æ—á—ñ–∫—É—î Webhook –≤—ñ–¥ Telegram.'})
    }
    # –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à —Å—Ç—ñ–π–∫—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞
    "https://www.bbc.com/business",
    "https://edition.cnn.com/business",
]

# üá∫üá¶ –£–ö–†–ê–á–ù–°–¨–ö–Ü –î–ñ–ï–†–ï–õ–ê (–ë–µ–∑ –∑–º—ñ–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –Ω–µ –±–ª–æ–∫—É—é—Ç—å)
UKRAINIAN_FEEDS = [
    "https://forbes.ua/",
    "https://www.liga.net/ua",
    "https://epravda.com.ua/",
    "https://delo.ua/",
    "https://mind.ua/",
    "https://ain.ua/",
    "https://thepage.ua/news",
]

def get_news_sync(sites: List[str]) -> List[str]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–∏–Ω –∑ –≤–µ–±—Å–∞–π—Ç—ñ–≤ (Playwright)."""
    results = []
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True) 
        page = browser.new_page()

        for site in sites:
            try:
                page.goto(site, timeout=30000) # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                page.wait_for_timeout(2000) 
                
                # –ú–∏ —à—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h2, h3. –Ø–∫—â–æ –Ω–∞ —Å–∞–π—Ç—ñ —ó—Ö –Ω–µ–º–∞—î, –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫.
                titles = page.locator("h2, h3").all_text_contents()
                clean = [t.strip() for t in titles if 25 < len(t.strip()) < 120]
                
                if clean:
                    results.append(f"üåê *{site}*")
                    for t in clean[:3]:
                        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç, —è–∫ —Ç–∏ –ø—Ä–æ—Å–∏–≤
                        results.append(f"‚Ä¢ [{t}]({site})") 
                        
                    results.append("") 
            except Exception as e:
                # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏ –ø–æ–±–∞—á–∏—à —É –ª–æ–≥–∞—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É, —è–∫—â–æ —Å–∞–π—Ç –∑–∞–±–ª–æ–∫—É—î IP —Ö–æ—Å—Ç–∏–Ω–≥—É
                logging.warning(f"‚ö†Ô∏è –ë–ª–æ–∫ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ {site}: {e}")
                
        browser.close()
    return results

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –±–æ—Ç (–Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É Render).\n\n"
        "üóû –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥–∏:\n"
        "`/news` ‚Äî –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üåç (–ø–æ–≤—ñ–ª—å–Ω–æ)\n"
        "`/newsua` ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–≤–∏–Ω–∏ üá∫üá¶ (–ø–æ–≤—ñ–ª—å–Ω–æ)",
        parse_mode="Markdown"
    )

@dp.message(Command("news"))
async def send_foreign_news(message: types.Message):
    sent = await message.answer("‚è≥ –ó–±–∏—Ä–∞—é –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –Ω–æ–≤–∏–Ω–∏... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π.")
    news = await asyncio.to_thread(get_news_sync, FOREIGN_FEEDS) 
    
    if news:
        full_text = "\n".join(news)
        await sent.edit_text(full_text[:4096], parse_mode="Markdown", disable_web_page_preview=True)
    else:
        await sent.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ üòî (–ú–æ–∂–ª–∏–≤–æ, —Å–∞–π—Ç–∏ –±–ª–æ–∫—É—é—Ç—å IP —Ö–æ—Å—Ç–∏–Ω–≥—É).")


@dp.message(Command("newsua"))
async def send_ukrainian_news(message: types.Message):
    sent = await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–≤–∏–Ω–∏... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π.")
    news = await asyncio.to_thread(get_news_sync, UKRAINIAN_FEEDS)
    
    if news:
        full_text = "\n".join(news)
        await sent.edit_text(full_text[:4096], parse_mode="Markdown", disable_web_page_preview=True)
    else:
        await sent.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ üòî (–ú–æ–∂–ª–∏–≤–æ, —Å–∞–π—Ç–∏ –±–ª–æ–∫—É—é—Ç—å IP —Ö–æ—Å—Ç–∏–Ω–≥—É).")


async def main():
    print("‚úÖ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π Playwright-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —á–µ–∫–∞—î –∫–æ–º–∞–Ω–¥...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
