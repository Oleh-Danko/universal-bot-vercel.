import os
import asyncio
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from live_parser import fetch_all_sources, chunk_messages

# ====== –õ–û–ì–ò (–≤–∏–¥–Ω–æ —É Render ‚Üí Logs) ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s: %(message)s")
log = logging.getLogger("news-bot")

# ====== ENV ======
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # 8392167879:AAG9GgPCXrajvdZca5vJcYopk3HO5w2hBhE
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))  # 6680030792
WEBHOOK_BASE = os.environ.get("WEBHOOK_URL")    # https://universal-bot-live.onrender.com

if not BOT_TOKEN or not WEBHOOK_BASE:
    raise RuntimeError("BOT_TOKEN —ñ WEBHOOK_URL –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤ Environment.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# ====== BOT/DP (aiogram 3.x) ======
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ====== –•–ï–ù–î–õ–ï–†–ò ======
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /news —â–æ–± –ó–ê–†–ê–ó –∑—ñ–±—Ä–∞—Ç–∏ —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ 10 –¥–∂–µ—Ä–µ–ª.")

@dp.message(Command("news"))
async def cmd_news(message: Message):
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑‚Ä¶ (10 –¥–∂–µ—Ä–µ–ª)")
    try:
        articles = await fetch_all_sources()
        if not articles:
            await message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        # —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π —Ä—ñ–∂–µ–º–æ –ø–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
        lines = [f"‚Ä¢ <a href='{a['link']}'>{a['title']}</a> <i>({a['source']})</i>" for a in articles]
        text = "üì∞ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (–∂–∏–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥)</b>\n\n" + "\n".join(lines)

        for chunk in chunk_messages(text, limit=4000):
            await message.answer(chunk, disable_web_page_preview=True)
            await asyncio.sleep(0.2)
        await message.answer(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {len(articles)} –Ω–æ–≤–∏–Ω –∑ 10 –¥–∂–µ—Ä–µ–ª.")
    except Exception as e:
        log.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer("üí• –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

# ====== HEALTHZ ======
async def handle_health(request):
    return web.Response(text="OK", status=200)

# ====== START/STOP HOOKS ======
async def on_startup(app: web.Application):
    log.info(f"üåê Starting bot, setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    log.info("‚úÖ Webhook set successfully")

async def on_shutdown(app: web.Application):
    log.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    log.info("‚úÖ Shutdown complete")

# ====== MAIN (AIOHTTP APP) ======
def main():
    app = web.Application()

    # —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ aiogram –Ω–∞ aiohttp
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # healthcheck –¥–ª—è Render
    app.router.add_get("/", handle_health)        # GET /
    app.router.add_get("/healthz", handle_health) # GET /healthz

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –°–õ–£–•–ê–Ñ–ú–û –°–ê–ú–ï –¶–ï–ô –ü–û–†–¢!
    port = int(os.environ.get("PORT", "10000"))
    log.info(f"üöÄ Starting web server on 0.0.0.0:{port}")
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()