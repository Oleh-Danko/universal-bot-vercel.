import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

import html 
import asyncio 

# >>> –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à—É <<<
from cache_manager import CacheManager 

# === CONFIG & INIT ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("WebhookBot")

# –õ–Ü–ú–Ü–¢ –î–û–í–ñ–ò–ù–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø TELEGRAM
MAX_MESSAGE_LENGTH = 4000 

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is required")

WEBHOOK_BASE = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# >>> –ù–û–í–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø: –ú–ï–ù–ï–î–ñ–ï–† –ö–ï–®–£ <<<
cache_manager = CacheManager()


# === HANDLERS ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. "
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö 10 –¥–∂–µ—Ä–µ–ª (BBC, –ï–ü, Reuters, FT)."
    )
    
@dp.message(Command("bloomberg"))
async def bloomberg_cmd_deprecated(message: Message):
    await message.answer(
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /bloomberg –±—ñ–ª—å—à–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è! "
        "–ü–∞—Ä—Å–µ—Ä Bloomberg —Å—Ç–∞–≤ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–º. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /news –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ —É—Å—ñ—Ö 10 –Ω–∞–¥—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (–≤–∫–ª—é—á–Ω–æ –∑ FT —Ç–∞ Reuters)."
    )

# >>> –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö /NEWS (—á–∏—Ç–∞—î –∫–µ—à) <<<
@dp.message(Command("news"))
async def news_cmd(message: Message):
    await message.answer("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–µ—à –Ω–æ–≤–∏–Ω. –¶–µ –∑–∞–π–º–∞—î –º–µ–Ω—à–µ —Å–µ–∫—É–Ω–¥–∏...")
    
    try:
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à, —è–∫–∏–π –±—É–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ 
        cache_data = cache_manager.load_cache()
        articles = cache_data.get('articles', [])
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ —á–∞—Å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        timestamp = cache_data.get('timestamp', '–ù–µ–≤—ñ–¥–æ–º–æ')
        if timestamp != '–ù–µ–≤—ñ–¥–æ–º–æ':
            timestamp = timestamp[:16].replace('T', ' ')

        if not articles:
            await message.answer("‚ùå –ö–µ—à –Ω–æ–≤–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ú–æ–∂–ª–∏–≤–æ, —Ñ–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å —â–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤.")
            return

        # 2. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–±–º–µ–∂—É—î–º–æ –¥–æ 5 —Å—Ç–∞—Ç–µ–π –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ)
        
        # –°–æ—Ä—Ç—É—î–º–æ, —â–æ–± –¥–∂–µ—Ä–µ–ª–∞ –π—à–ª–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
        articles.sort(key=lambda x: x['source'])
        
        current_source = None
        formatted_messages = []
        source_counts = {} 
        
        for n in articles:
            source_name = n['source']
            if source_counts.get(source_name, 0) >= 5: # –õ—ñ–º—ñ—Ç 5 —Å—Ç–∞—Ç–µ–π –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ
                continue
                
            if source_name != current_source:
                current_source = source_name
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∂–µ—Ä–µ–ª–∞
                formatted_messages.append(f"\n\n\n**-- {current_source} --**") 
            
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ Markdown
            title_escaped = n['title'].replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')

            # –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è BBC
            link_text = n['link']
            if 'bbc.co.uk' in link_text:
                 link_text = link_text.split('?at_medium')[0]
            
            formatted_messages.append(f"üì∞ *{title_escaped}*\n[–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é]({link_text})")
            source_counts[source_name] = source_counts.get(source_name, 0) + 1

        # 3. –ù–ê–î–Ü–ô–ù–ê –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ß–ê–°–¢–ò–ù–ê–ú–ò 
        
        initial_prefix = f"üì∞ **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (–æ–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}). –ó–∞–≥–∞–ª–æ–º —É –∫–µ—à—ñ: {len(articles)} —Å—Ç–∞—Ç–µ–π.**\n\n"
        current_message_parts = [initial_prefix]
        messages_to_send = []
        
        for part in formatted_messages:
            test_message = "\n\n".join(current_message_parts + [part])
            
            if len(test_message) > MAX_MESSAGE_LENGTH:
                messages_to_send.append("\n\n".join(current_message_parts))
                current_message_parts = [part] # –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π –±–ª–æ–∫
            else:
                current_message_parts.append(part)

        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π, –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –±–ª–æ–∫
        if current_message_parts and (len(current_message_parts) > 1 or current_message_parts[0] != initial_prefix):
             messages_to_send.append("\n\n".join(current_message_parts)) 

        # 4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if messages_to_send:
            for msg_content in messages_to_send:
                if msg_content.strip():
                    await message.answer(
                        msg_content, 
                        parse_mode="Markdown", 
                        disable_web_page_preview=True
                    )
        else:
            await message.answer("‚ùå –ù–æ–≤–∏–Ω–∏ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ —Å—Ç–∞–≤—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∑–±—ñ–π –ø—Ä–∏ —ó—Ö —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ.")

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–µ—à—É: {e}")

# === STARTUP / SHUTDOWN (Async Operations) ===
async def on_startup(app):
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook successfully set.")

async def on_shutdown(app):
    logger.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚úÖ Shutdown complete.")

# === HEALTH CHECK ===
async def handle_health(request):
    return web.Response(text="‚úÖ OK", status=200)

# === MAIN (Synchronous Server Run) ===
def main():
    app = web.Application()

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.router.add_get("/", handle_health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()