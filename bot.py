import logging
import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from bloomberg_parser import fetch_bloomberg

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://universal-bot-live.onrender.com/webhook

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –ö–æ–º–∞–Ω–¥–∏ ===
@dp.message(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üëã –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!")

@dp.message(commands=['news'])
async def get_news(message: types.Message):
    try:
        headlines = await fetch_bloomberg()
        if not headlines:
            await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –ú–æ–∂–ª–∏–≤–æ, —Å–∞–π—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∑–∞–ø–∏—Ç –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
            return
        formatted = "\n".join([f"‚Ä¢ {t}" for t in headlines[:10]])
        await message.answer(f"üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ Bloomberg:\n\n{formatted}")
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /news")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è aiohttp –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É ===
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    logging.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

app = web.Application()

# ‚úÖ HEALTHCHECK endpoint (–¥–ª—è Render)
async def healthcheck(request):
    return web.Response(text="OK", status=200)

app.router.add_get("/", healthcheck)
app.router.add_get("/health", healthcheck)

# === Webhook handler ===
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
setup_application(app, dp, bot=bot)

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))