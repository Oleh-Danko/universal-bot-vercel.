import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

import html 
import asyncio 

from rss_parser import fetch_rss_news 
from bloomberg_parser import fetch_bloomberg_news # –ó–∞–ª–∏—à–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç, –∞–ª–µ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω–µ []

# === CONFIG & INIT ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("WebhookBot")

# –õ–Ü–ú–Ü–¢ –î–û–í–ñ–ò–ù–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø TELEGRAM
# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 4000, —â–æ–± –º–∞—Ç–∏ –∑–∞–ø–∞—Å –¥–ª—è Markdown-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
MAX_MESSAGE_LENGTH = 4000 

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is required")

WEBHOOK_BASE = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === RSS –î–ñ–ï–†–ï–õ–ê (10 –¥–∂–µ—Ä–µ–ª) ===
ALL_RSS_FEEDS = {
    # 1. BBC Business 
    "BBC Business": "http://feeds.bbci.co.uk/news/business/rss.xml",
    
    # 2. –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∞ –ü—Ä–∞–≤–¥–∞
    "–ï–ü –§—ñ–Ω–∞–Ω—Å–∏": "https://www.epravda.com.ua/rss/finances/",
    "–ï–ü –ö–æ–ª–æ–Ω–∫–∏/–î—É–º–∫–∏": "https://www.epravda.com.ua/rss/columns/", 

    # 3. Reuters 
    "Reuters –ë—ñ–∑–Ω–µ—Å": "http://feeds.reuters.com/reuters/businessNews",
    "Reuters –†–∏–Ω–∫–∏": "http://feeds.reuters.com/reuters/marketsNews",
    "Reuters –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó": "http://feeds.reuters.com/reuters/technologyNews",

    # 4. Financial Times (FT)
    "FT –ö–æ–º–ø–∞–Ω—ñ—ó": "https://www.ft.com/companies?format=rss",
    "FT –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó": "https://www.ft.com/technology?format=rss",
    "FT –†–∏–Ω–∫–∏": "https://www.ft.com/markets?format=rss",
    "FT –î—É–º–∫–∏": "https://www.ft.com/opinion?format=rss"
}


# === HANDLERS ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. "
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö 10 –¥–∂–µ—Ä–µ–ª (BBC, –ï–ü, Reuters, FT)."
    )
    
@dp.message(Command("bloomberg"))
async def bloomberg_cmd_deprecated(message: Message):
    # –î–æ–¥–∞–Ω–æ —è–≤–Ω—É –æ–±—Ä–æ–±–∫—É –∫–æ–º–∞–Ω–¥–∏ /bloomberg, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–º–∏–ª–∫–∞–º
    await message.answer(
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /bloomberg –±—ñ–ª—å—à–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è! "
        "–ü–∞—Ä—Å–µ—Ä Bloomberg —Å—Ç–∞–≤ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–º. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /news –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ —É—Å—ñ—Ö 10 –Ω–∞–¥—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (–≤–∫–ª—é—á–Ω–æ –∑ FT —Ç–∞ Reuters)."
    )

@dp.message(Command("news"))
async def news_cmd(message: Message, bot: Bot):
    await message.answer("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ 10 RSS-—Å—Ç—Ä—ñ—á–æ–∫ (BBC, –ï–ü, Reuters, FT). –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 15 —Å–µ–∫—É–Ω–¥...")
    
    all_news = []
    tasks = []
    
    for source_name, url in ALL_RSS_FEEDS.items():
        tasks.append(asyncio.to_thread(fetch_rss_news, url))
        
    try:
        # 2. –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for source_name, result in zip(ALL_RSS_FEEDS.keys(), results):
            if isinstance(result, list):
                for item in result:
                    item['source'] = source_name
                    all_news.append(item)
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ {source_name}: {result}")


        if not all_news:
            await message.answer("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.")
            return

        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∂–µ—Ä–µ–ª–æ–º
        all_news.sort(key=lambda x: x['source'])
        
        # 3. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ç–∞ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        current_source = None
        formatted_messages = []
        
        for n in all_news:
            if n['source'] != current_source:
                current_source = n['source']
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∂–µ—Ä–µ–ª–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–∏–π
                formatted_messages.append(f"\n\n\n**-- {current_source} --**") 
            
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ Markdown
            title_escaped = n['title'].replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')

            link_text = n['link']
            if 'bbc.co.uk' in link_text:
                 link_text = link_text.split('?at_medium')[0]
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–Ω—É
            formatted_messages.append(f"üì∞ *{title_escaped}*\n[–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é]({link_text})")

        # 4. –ù–ê–î–Ü–ô–ù–ê –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ß–ê–°–¢–ò–ù–ê–ú–ò (–ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø)
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫ –ø—Ä–µ—Ñ—ñ–∫—Å –¥–æ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        initial_prefix = f"üì∞ **–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω: {len(all_news)}**\n\n"
        
        current_message_parts = [initial_prefix]
        
        # –°–ø–∏—Å–æ–∫, –∫—É–¥–∏ –±—É–¥–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≥–æ—Ç–æ–≤—ñ –±–ª–æ–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        messages_to_send = []
        
        for part in formatted_messages:
            # –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —á–∞—Å—Ç–∏–Ω—É
            test_message = "\n\n".join(current_message_parts + [part])
            
            if len(test_message) > MAX_MESSAGE_LENGTH:
                # –Ø–∫—â–æ –ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑—ñ–±—Ä–∞–Ω–∏–π –±–ª–æ–∫
                messages_to_send.append("\n\n".join(current_message_parts))
                
                # –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π –±–ª–æ–∫ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ "part"
                current_message_parts = [part]
            else:
                # –õ—ñ–º—ñ—Ç –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ —á–∞—Å—Ç–∏–Ω—É –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–ª–æ–∫—É
                current_message_parts.append(part)

        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π, –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –±–ª–æ–∫
        if current_message_parts and (len(current_message_parts) > 1 or current_message_parts[0] != initial_prefix):
             messages_to_send.append("\n\n".join(current_message_parts))


        # 5. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        
        if messages_to_send:
            for msg_content in messages_to_send:
                # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ –ø—Ä–µ—Ñ—ñ–∫—Å, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
                if len(msg_content.strip()) < len(initial_prefix.strip()) + 5 and msg_content.startswith(initial_prefix):
                    continue

                await message.answer(
                    msg_content, 
                    parse_mode="Markdown", 
                    disable_web_page_preview=True
                )
        else:
            await message.answer("‚ùå –ù–æ–≤–∏–Ω–∏ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ —Å—Ç–∞–≤—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∑–±—ñ–π –ø—Ä–∏ —ó—Ö —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ.")


    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")


# === STARTUP / SHUTDOWN (Async Operations) ===
async def on_startup(app):
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook successfully set.")

async def on_shutdown(app):
    logger.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚úÖ Shutdown complete.")

# === HEALTH CHECK ===
async def handle_health(request):
    return web.Response(text="‚úÖ OK", status=200)

# === MAIN (Synchronous Server Run) ===
def main():
    app = web.Application()

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.router.add_get("/", handle_health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    logger.info("üåê Starting web server on 0.0.0.0:10000 ...")
    
    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()