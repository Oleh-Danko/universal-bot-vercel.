import os
import logging
import asyncio 
from aiohttp import web
from datetime import datetime # –î–æ–¥–∞–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è datetime.now()

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.client.default import DefaultBotProperties 

# >>> –í–ò–ü–†–ê–í–õ–ï–ù–û –Ü–ú–ü–û–†–¢: —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ CacheManager
from cache_manager import CacheManager, run_cache_update 

# === CONFIG & INIT ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("WebhookBot")

# –õ–Ü–ú–Ü–¢ –î–û–í–ñ–ò–ù–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø TELEGRAM
# –•–æ—á–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 4000, –∑–º—ñ–Ω–Ω–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –ª–æ–≥—ñ—Ü—ñ chunking, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–ª—É—Ç–∞–Ω–∏–Ω–∏
MAX_MESSAGE_LENGTH = 4000 

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is required")

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—É –Ω–∞ Render, –∞–±–æ –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π URL
WEBHOOK_BASE = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–æ—Ç–∞ —Ç–∞ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# –ó–º—ñ–Ω—é—î–º–æ default parse_mode –Ω–∞ None, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ news_cmd –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=None)) 
dp = Dispatcher()

# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø: –ú–ï–ù–ï–î–ñ–ï–† –ö–ï–®–£
cache_manager = CacheManager()


# === –§–û–ù–û–í–ê –ó–ê–î–ê–ß–ê: –ü–ê–†–°–ï–† ===
async def run_parser_background():
    """–ó–∞–ø—É—Å–∫–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —É –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—ñ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º."""
    
    # –ü–ï–†–®–ê –ó–ê–ì–†–£–ó–ö–ê –ü–†–ò –°–¢–ê–†–¢–Ü (–ß–µ–∫–∞—î–º–æ, —â–æ–± –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è, —â–æ–± –∫–µ—à –Ω–µ –±—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–º)
    logger.info("Starting initial cache update (running run_cache_update())...")
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∫–µ—à
    await run_cache_update() 
    logger.info("Initial cache update finished.")
    
    # –ü–û–î–ê–õ–¨–®–ò–ô –¶–ò–ö–õ –û–ù–û–í–õ–ï–ù–ù–Ø (—Ä–∞–∑ –Ω–∞ 60 —Ö–≤–∏–ª–∏–Ω)
    while True:
        await asyncio.sleep(3600) # –ß–µ–∫–∞—î–º–æ 1 –≥–æ–¥–∏–Ω—É
        try:
            logger.info("Starting scheduled cache update...")
            await run_cache_update()
            logger.info("Scheduled cache update finished.")
        except Exception as e:
            logger.error(f"Error during scheduled cache update: {e}")


# === HANDLERS ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. "
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö 10 –¥–∂–µ—Ä–µ–ª (BBC, –ï–ü, Reuters, FT)."
    )
    
@dp.message(Command("bloomberg"))
async def bloomberg_cmd_deprecated(message: Message):
    await message.answer(
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /bloomberg –±—ñ–ª—å—à–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è! "
        "–ü–∞—Ä—Å–µ—Ä Bloomberg —Å—Ç–∞–≤ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–º. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /news –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ —É—Å—ñ—Ö 10 –Ω–∞–¥—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (–≤–∫–ª—é—á–Ω–æ –∑ FT —Ç–∞ Reuters)."
    )

# –û–ë–†–û–ë–ù–ò–ö /NEWS (—á–∏—Ç–∞—î –∫–µ—à)
# –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø: –í–ò–î–ê–õ–ï–ù–û –õ–Ü–ú–Ü–¢ 5 –°–¢–ê–¢–ï–ô, –í–ü–†–û–í–ê–î–ñ–ï–ù–û CHUNKING LOGIC
@dp.message(Command("news"))
async def news_cmd(message: Message):
    await message.answer("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–µ—à –Ω–æ–≤–∏–Ω. –¶–µ –∑–∞–π–º–∞—î –º–µ–Ω—à–µ —Å–µ–∫—É–Ω–¥–∏...")
    
    try:
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à
        cache_data = cache_manager.load_cache()
        articles = cache_data.get('articles', [])
        
        # –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É
        timestamp = cache_data.get('timestamp', '–ù–µ–≤—ñ–¥–æ–º–æ')
        if isinstance(timestamp, str) and timestamp != '–ù–µ–≤—ñ–¥–æ–º–æ':
            timestamp = timestamp[:16].replace('T', ' ')

        if not articles:
            await message.answer("‚ùå –ö–µ—à –Ω–æ–≤–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ú–æ–∂–ª–∏–≤–æ, —Ñ–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å —â–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤.")
            return

        total_count = len(articles)
        
        # 2. –°–æ—Ä—Ç—É—î–º–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏ 
        articles.sort(key=lambda x: x['source'])
        
        
        # --- –õ–û–ì–Ü–ö–ê –†–û–ó–ë–ò–¢–¢–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ (Chunking) ---
        
        TELEGRAM_CHUNK_LIMIT = 4000
        formatted_chunk = ""
        sent_count = 0
        current_source_title = None
        
        # –ü–µ—Ä–≤–∏–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å (–≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–∫—Ä–µ–º–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏)
        initial_prefix = f"üì∞ <b>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏</b> (–æ–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}). <b>–ó–∞–≥–∞–ª–æ–º —É –∫–µ—à—ñ: {total_count} —Å—Ç–∞—Ç–µ–π.</b>\n\n"
        await message.answer(initial_prefix, parse_mode="HTML")
        
        # 3. –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –ø–æ –í–°–Ü–• —Å—Ç–∞—Ç—Ç—è—Ö (–õ—ñ–º—ñ—Ç 5 —Å—Ç–∞—Ç–µ–π –≤–∏–¥–∞–ª–µ–Ω–æ)
        for article in articles:
            
            # a) –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ó–∞–≥–æ–ª–æ–≤–∫–∞ –î–∂–µ—Ä–µ–ª–∞ (—è–∫—â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è)
            source_header = ""
            if article['source'] != current_source_title:
                source_header = f"\n\n-- {article['source']} --\n\n"
                current_source_title = article['source']
            
            # b) –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è BBC —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            link_text = article['link']
            if 'bbc.co.uk' in link_text:
                 link_text = link_text.split('?at_medium')[0]
                 
            # c) –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¢–µ–∫—Å—Ç—É –°—Ç–∞—Ç—Ç—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML)
            article_text = f"üì∞ <b>{article['title']}</b>\n<a href='{link_text}'>–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é</a>\n" 

            
            # d) –ü–ï–†–ï–í–Ü–†–ö–ê –õ–Ü–ú–Ü–¢–£ (Chunking Logic)
            # –Ø–∫—â–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∞ + —Å—Ç–∞—Ç—Ç—ñ) –ø–µ—Ä–µ–≤–∏—â–∏—Ç—å –ª—ñ–º—ñ—Ç:
            if len(formatted_chunk) + len(source_header) + len(article_text) > TELEGRAM_CHUNK_LIMIT:
                
                # i. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏–π –±–ª–æ–∫
                if formatted_chunk.strip():
                    await message.answer(formatted_chunk, parse_mode="HTML", disable_web_page_preview=True)
                    await asyncio.sleep(0.3) # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ Flood Control
                
                # ii. –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π –±–ª–æ–∫ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∂–µ—Ä–µ–ª–∞ —Ç–∞ —Å—Ç–∞—Ç—Ç—ñ
                formatted_chunk = source_header + article_text
            
            else:
                # iii. –î–æ–¥–∞—î–º–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–ª–æ–∫—É
                formatted_chunk += source_header + article_text
            
            sent_count += 1 

        # 4. –í–Ü–î–ü–†–ê–í–ö–ê –û–°–¢–ê–ù–ù–¨–û–ì–û –ë–õ–û–ö–£ (–§—ñ–Ω–∞–ª—å–Ω–∏–π Flush)
        if formatted_chunk.strip():
            await message.answer(formatted_chunk, parse_mode="HTML", disable_web_page_preview=True)

        # 5. –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –í–°–Ü —Å—Ç–∞—Ç—Ç—ñ)
        await message.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ {sent_count} –Ω–æ–≤–∏–Ω–∏ —ñ–∑ –∫–µ—à—É. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {total_count} —Å—Ç–∞—Ç–µ–π.")


    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /news: {e}")

# –ö—ñ–Ω–µ—Ü—å —Ñ—É–Ω–∫—Ü—ñ—ó news_cmd


# === STARTUP / SHUTDOWN (Async Operations) ===
async def on_startup(app):
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook successfully set.")
    
    # !!! –ö–õ–Æ–ß–û–í–ò–ô –ú–û–ú–ï–ù–¢: –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê –Ø–ö –§–û–ù–û–í–û–á –ó–ê–î–ê–ß–Ü !!!
    asyncio.create_task(run_parser_background())
    logger.info("‚úÖ Parser background task scheduled.")

async def on_shutdown(app):
    logger.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚úÖ Shutdown complete.")

# === HEALTH CHECK ===
async def handle_health(request):
    return web.Response(text="‚úÖ OK", status=200)

# === MAIN (Synchronous Server Run) ===
def main():
    app = web.Application()

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.router.add_get("/", handle_health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()