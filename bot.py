import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from bloomberg_parser import fetch_bloomberg

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("WebhookBot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is required")

# –§—ñ–Ω–∞–ª—å–Ω–∏–π URL Webhook, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è Render
# –Ø–∫—â–æ WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è fallback-–∑–Ω–∞—á–µ–Ω–Ω—è
WEBHOOK_BASE = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === HANDLERS ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥."
    )

@dp.message(Command("news"))
async def news_cmd(message: Message):
    await message.answer("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ Bloomberg...")
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –ø–∞—Ä—Å–µ—Ä
        news_list = await fetch_bloomberg(top_n=5)
        if not news_list:
            raise ValueError("–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω")

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
        formatted_news = []
        for n in news_list:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏ Bloomberg, —è–∫—ñ –≤–∏ –ø—Ä–æ—Å–∏–ª–∏ –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ (Markets, Economics, ...)
            # –£ —Ü—å–æ–º—É –∫–æ–¥—ñ –º–∏ –ª–∏—à–µ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ:
            formatted_news.append(f"üì∞ <b>{n['title']}</b>\n<a href='{n['link']}'>–ß–∏—Ç–∞—Ç–∏ –Ω–∞ Bloomberg</a>")

        text = "\n\n".join(formatted_news)
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")

# === WEBHOOK SETUP ===
async def on_startup(app):
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    # –í–∏–¥–∞–ª—è—î–º–æ webhook –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é
    logger.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()

def main():
    app = web.Application()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ Webhook
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π on_startup —Ç–∞ on_shutdown
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # Health Check Endpoint
    app.router.add_get("/", lambda r: web.Response(text="OK", status=200))

    logger.info("üåê Starting web server on 0.0.0.0:10000...")
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

if __name__ == "__main__":
    main()