# bot.py
import os
import asyncio
import logging
from typing import List, Dict
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from live_parser import fetch_all_sources_grouped

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s:%(name)s:%(message)s"
)
log = logging.getLogger("news-bot")

# ---------- ENV ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
WEBHOOK_BASE = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä. https://universal-bot-live.onrender.com

if not BOT_TOKEN or not WEBHOOK_BASE:
    raise RuntimeError("BOT_TOKEN —ñ WEBHOOK_URL –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ –≤ Environment Variables.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# ---------- BOT/DP (aiogram 3) ----------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- –•–ï–ù–î–õ–ï–†–ò ----------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –∑–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.\n"
        "–ù–∞–¥—ñ—à–ª–∏ /news —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—É —Å—Ç—Ä—ñ—á–∫—É –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑."
    )

def _chunk_messages(lines: List[str], hard_limit: int = 3800) -> List[str]:
    """
    –†–æ–∑–±–∏–≤–∞—î –≤–µ–ª–∏–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –Ω–∞ —à–º–∞—Ç–∫–∏ –¥–æ ~3800 —Å–∏–º–≤–æ–ª—ñ–≤,
    —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç Telegram (4096).
    """
    chunks = []
    block = ""
    for line in lines:
        if len(block) + len(line) + 1 > hard_limit:
            if block:
                chunks.append(block.rstrip())
            block = line + "\n"
        else:
            block += line + "\n"
    if block.strip():
        chunks.append(block.rstrip())
    return chunks

@dp.message(Command("news"))
async def cmd_news(message: Message):
    # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑‚Ä¶ (10 –¥–∂–µ—Ä–µ–ª)")

    try:
        grouped = await fetch_all_sources_grouped()
        # grouped: Dict[source_name, List[Dict{title, link, desc}]]

        if not any(grouped.values()):
            await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")
            return

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º –ø–æ –¥–∂–µ—Ä–µ–ª–∞—Ö
        all_lines: List[str] = ["üì∞ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (–∂–∏–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥)</b>"]
        total = 0

        order = [
            "BBC (Business)",
            "Reuters (Business)",
            "Reuters (Markets)",
            "Reuters (Technology)",
            "FT (Companies)",
            "FT (Markets)",
            "FT (Technology)",
            "FT (Opinion)",
            "Epravda (Finances)",
            "Epravda (Columns)",
        ]

        # –¥–æ–¥–∞–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –≤ –∫—ñ–Ω—Ü—ñ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∑'—è–≤–ª—è—Ç—å—Å—è —ñ–Ω—à—ñ)
        for k in grouped.keys():
            if k not in order:
                order.append(k)

        for source in order:
            items = grouped.get(source, [])
            if not items:
                continue
            all_lines.append(f"\n<b>‚Äî {source}</b>")
            for it in items:
                title = it["title"].strip()
                link = it["link"].strip()
                desc = (it.get("desc") or "").strip()

                if desc:
                    all_lines.append(f"‚Ä¢ <a href=\"{link}\">{title}</a>\n    ‚Äî {desc}")
                else:
                    all_lines.append(f"‚Ä¢ <a href=\"{link}\">{title}</a>")
                total += 1

        # –†–æ–∑—Å–∏–ª–∫–∞ –ø–∞—á–∫–∞–º–∏
        for part in _chunk_messages(all_lines):
            await message.answer(part, disable_web_page_preview=False)

        await message.answer(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {total} –Ω–æ–≤–∏–Ω —ñ–∑ 10 –¥–∂–µ—Ä–µ–ª.")
    except Exception as e:
        logging.exception("news failed")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")

# ---------- HEALTH ----------
async def handle_health(request):
    return web.Response(text="OK", status=200)

# ---------- START/STOP ----------
async def on_startup(app: web.Application):
    log.info(f"üåê Starting bot, setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    log.info("‚úÖ Webhook set successfully")

async def on_shutdown(app: web.Application):
    log.info("üîª Deleting webhook & closing session‚Ä¶")
    try:
        await bot.delete_webhook()
    except Exception:
        pass
    await bot.session.close()
    log.info("‚úÖ Shutdown complete")

# ---------- AIOHTTP APP ----------
def main():
    app = web.Application()

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ aiogram –¥–æ aiohttp
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # healthcheck
    app.router.add_get("/", handle_health)
    app.router.add_get("/healthz", handle_health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ì–û–õ–û–í–ù–ï: —Å–ª—É—Ö–∞—î–º–æ –ø–æ—Ä—Ç –∑ ENV (Render)
    port = int(os.environ.get("PORT", "10000"))
    log.info(f"üöÄ Starting web server on 0.0.0.0:{port}")
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()