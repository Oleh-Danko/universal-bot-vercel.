# ==========================================================
# –§–∞–π–ª: bot.py (–ó–∞–º—ñ–Ω–∞)
# –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /bloomberg —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è 9 –Ω–æ–≤–∏—Ö RSS-—Å—Ç—Ä—ñ—á–æ–∫.
# ==========================================================

import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

import html 
import asyncio # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è asyncio.to_thread, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ–±–ª–æ–∫—É—é—á–∏–º

from rss_parser import fetch_rss_news 
from bloomberg_parser import fetch_bloomberg_news # –ó–∞–ª–∏—à–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç, –∞–ª–µ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω–µ []

# === CONFIG & INIT ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("WebhookBot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is required")

WEBHOOK_BASE = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ù–û–í–Ü RSS –î–ñ–ï–†–ï–õ–ê (10 –¥–∂–µ—Ä–µ–ª) ===
ALL_RSS_FEEDS = {
    # 1. BBC Business (–ü–æ—Ç–æ—á–Ω–µ —Ä–æ–±–æ—á–µ –¥–∂–µ—Ä–µ–ª–æ)
    "BBC Business": "http://feeds.bbci.co.uk/news/business/rss.xml",
    
    # 2. –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∞ –ü—Ä–∞–≤–¥–∞
    "–ï–ü –§—ñ–Ω–∞–Ω—Å–∏": "https://www.epravda.com.ua/rss/finances/",
    "–ï–ü –ö–æ–ª–æ–Ω–∫–∏/–î—É–º–∫–∏": "https://www.epravda.com.ua/rss/columns/", 

    # 3. Reuters 
    "Reuters –ë—ñ–∑–Ω–µ—Å": "http://feeds.reuters.com/reuters/businessNews",
    "Reuters –†–∏–Ω–∫–∏": "http://feeds.reuters.com/reuters/marketsNews",
    "Reuters –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó": "http://feeds.reuters.com/reuters/technologyNews",

    # 4. Financial Times (FT)
    "FT –ö–æ–º–ø–∞–Ω—ñ—ó": "https://www.ft.com/companies?format=rss",
    "FT –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó": "https://www.ft.com/technology?format=rss",
    "FT –†–∏–Ω–∫–∏": "https://www.ft.com/markets?format=rss",
    "FT –î—É–º–∫–∏": "https://www.ft.com/opinion?format=rss"
}


# === HANDLERS ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. "
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö 10 –¥–∂–µ—Ä–µ–ª (BBC, –ï–ü, Reuters, FT)."
    )

@dp.message(Command("news"))
async def news_cmd(message: Message, bot: Bot):
    await message.answer("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ 10 RSS-—Å—Ç—Ä—ñ—á–æ–∫ (BBC, –ï–ü, Reuters, FT). –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 15 —Å–µ–∫—É–Ω–¥...")
    
    all_news = []
    
    # 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    tasks = []
    for source_name, url in ALL_RSS_FEEDS.items():
        tasks.append(asyncio.to_thread(fetch_rss_news, url))
        
    try:
        # 2. –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for source_name, result in zip(ALL_RSS_FEEDS.keys(), results):
            if isinstance(result, list):
                for item in result:
                    item['source'] = source_name
                    all_news.append(item)
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ {source_name}: {result}")


        if not all_news:
            await message.answer("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.")
            return

        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∂–µ—Ä–µ–ª–æ–º
        all_news.sort(key=lambda x: x['source'])
        
        # 3. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ç–∞ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        current_source = None
        formatted_messages = []
        
        for n in all_news:
            if n['source'] != current_source:
                current_source = n['source']
                formatted_messages.append(f"\n\n\n**-- {current_source} --**") 
            
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ Markdown
            title_escaped = n['title'].replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')

            link_text = n['link']
            if 'bbc.co.uk' in link_text:
                 link_text = link_text.split('?at_medium')[0]
            
            formatted_messages.append(f"üì∞ *{title_escaped}*\n[–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é]({link_text})")

        # 4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ä–æ–∑–¥—ñ–ª—è—î–º–æ, —è–∫—â–æ –≤–æ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ)
        final_text = "\n\n".join(formatted_messages)
        
        if len(final_text) > 4096:
            split_point = len(formatted_messages) // 2
            
            chunk1 = "\n\n".join(formatted_messages[:split_point])
            chunk2 = "\n\n".join(formatted_messages[split_point:])

            await message.answer(
                f"üì∞ **–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω: {len(all_news)}**\n\n" + chunk1, 
                parse_mode="Markdown", 
                disable_web_page_preview=True
            )
            await message.answer(
                chunk2, 
                parse_mode="Markdown", 
                disable_web_page_preview=True
            )
        else:
            await message.answer(
                f"üì∞ **–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω: {len(all_news)}**\n\n" + final_text, 
                parse_mode="Markdown", 
                disable_web_page_preview=True
            )


    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")


# === STARTUP / SHUTDOWN (Async Operations) ===
async def on_startup(app):
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook successfully set.")

async def on_shutdown(app):
    logger.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚úÖ Shutdown complete.")

# === HEALTH CHECK ===
async def handle_health(request):
    return web.Response(text="‚úÖ OK", status=200)

# === MAIN (Synchronous Server Run) ===
def main():
    app = web.Application()

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.router.add_get("/", handle_health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    logger.info("üåê Starting web server on 0.0.0.0:10000 ...")
    
    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()