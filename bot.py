import os
import asyncio
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# ====== –õ–û–ì–ò ======
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("news-bot")

# ====== ENV ======
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
WEBHOOK_BASE = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ https://universal-bot-live.onrender.com

if not BOT_TOKEN or not WEBHOOK_BASE:
    raise RuntimeError("BOT_TOKEN —ñ WEBHOOK_URL –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤ Environment.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# ====== BOT/DP (aiogram 3.x) ======
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ====== –•–ï–ù–î–õ–ï–†–ò ======
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /news —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏.")

@dp.message(Command("news"))
async def cmd_news(message: Message):
    # –¢–£–¢ –ü–†–ò–ö–õ–ê–î ‚Äì –≤—ñ–¥–¥–∞–π 3 —Ä—è–¥–∫–∏, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î. –ü–æ—Ç—ñ–º –ø—ñ–¥–∫–ª—é—á–∏–º–æ –∫–µ—à.
    text = (
        "üì∞ <b>–ù–æ–≤–∏–Ω–∏ –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∑ –∫–µ—à—É</b>\n"
        "‚úÖ –ê–ª–µ –≤–µ–±—Ö—É–∫ —ñ –ø–æ—Ä—Ç –ø—Ä–∞—Ü—é—é—Ç—å.\n"
        "‚û°Ô∏è –î–∞–ª—ñ –ø—ñ–¥–∫–ª—é—á–∏–º–æ –∫–µ—à/–ø–∞—Ä—Å–µ—Ä."
    )
    await message.answer(text, disable_web_page_preview=True)

# ====== HEALTHZ ======
async def handle_health(request):
    return web.Response(text="OK", status=200)

# ====== START/STOP HOOKS ======
async def on_startup(app: web.Application):
    log.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    log.info("Webhook set ‚úÖ")

async def on_shutdown(app: web.Application):
    log.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    log.info("Shutdown complete ‚úÖ")

# ====== MAIN (AIOHTTP APP) ======
def main():
    app = web.Application()

    # —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ aiogram –Ω–∞ aiohttp
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # healthcheck –¥–ª—è Render
    app.router.add_get("/", handle_health)        # GET /
    app.router.add_get("/healthz", handle_health) # GET /healthz

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ì–û–õ–û–í–ù–ï: —Å–ª—É—Ö–∞—î–º–æ —Å–∞–º–µ –ø–æ—Ä—Ç –∑ ENV
    port = int(os.environ.get("PORT", "10000"))
    log.info(f"üåê Starting web server on 0.0.0.0:{port} ...")
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()