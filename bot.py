import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import cache_manager

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# === –¢–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ===
BOT_TOKEN = "8392167879:AAG9GgPCXrajvdZca5vJcYopk3HO5w2hBhE"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –Ω–æ–≤–∏–Ω. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π:\n"
        "/news ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n"
        "/update_cache ‚Äî –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à –Ω–æ–≤–∏–Ω –≤—Ä—É—á–Ω—É"
    )


# === –ö–æ–º–∞–Ω–¥–∞ /update_cache ===
@dp.message_handler(commands=["update_cache"])
async def cmd_update_cache(message: types.Message):
    await message.reply("üîÑ –û–Ω–æ–≤–ª—é—é –∫–µ—à –Ω–æ–≤–∏–Ω, –∑–∞—á–µ–∫–∞–π –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")
    count = cache_manager.run_cache_update()
    await message.reply(f"‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–±–µ—Ä–µ–∂–µ–Ω–æ {count} –Ω–æ–≤–∏–Ω.")


# === –ö–æ–º–∞–Ω–¥–∞ /news ===
@dp.message_handler(commands=["news"])
async def cmd_news(message: types.Message):
    cache = cache_manager.load_cache()
    articles = cache.get("articles", [])
    if not articles:
        await message.reply("‚ùå –ù–µ–º–∞—î –Ω–æ–≤–∏–Ω —É –∫–µ—à—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π /update_cache.")
        return

    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏
    articles.sort(key=lambda x: x["source"])
    text = f"üóû <b>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ ({len(articles)} —à—Ç.)</b>\n"
    current_source = None
    count = 0

    for article in articles:
        if article["source"] != current_source:
            current_source = article["source"]
            text += f"\n\n<b>‚Äî {current_source} ‚Äî</b>\n"
        text += f"‚Ä¢ <a href='{article['link']}'>{article['title']}</a>\n"
        count += 1
        if count >= 40:  # –º–∞–∫—Å–∏–º—É–º 40 –Ω–æ–≤–∏–Ω, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç Telegram
            break

    await message.reply(text, parse_mode="HTML", disable_web_page_preview=True)


# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏ ===
async def scheduler():
    while True:
        try:
            logger.info("üïê –ü–ª–∞–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É...")
            cache_manager.run_cache_update()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É scheduler: {e}")
        await asyncio.sleep(7200)  # 2 –≥–æ–¥–∏–Ω–∏


async def on_startup(_):
    asyncio.create_task(scheduler())
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)