import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiohttp import web 
import logging

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–∞—Ä—Å–µ—Ä
from bloomberg_parser import fetch_bloomberg 

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
LOG = logging.getLogger("WebhookBot")

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
TOKEN = os.environ.get("BOT_TOKEN") 
if not TOKEN:
    raise ValueError("‚ùå Environment variable BOT_TOKEN not found! Please set it on Render.")

# URL –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –Ω–∞ Render (–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û!)
# !!! –ü–ï–†–ï–í–Ü–†–¢–ï –¶–ï–ô URL: https://universal-bot-live.onrender.com !!!
WEBHOOK_HOST = 'https://universal-bot-live.onrender.com'
WEBHOOK_PATH = f'/webhook/{TOKEN}'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(
    token=TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. –¢–µ–ø–µ—Ä —è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π Webhook!\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥."
    )

@dp.message(Command("news"))
async def news_command(message: types.Message):
    await message.answer("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ Bloomberg...")
    try:
        # fetch_bloomberg —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ dict: [{"title": "...", "url": "..."}]
        headlines = await fetch_bloomberg(top_n=10) 
        
        if headlines:
            formatted = "\n\n".join([f"üîπ <a href='{h['url']}'>{h['title']}</a>" for h in headlines if h.get('url')])
            # –Ø–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —î, –∞–ª–µ –Ω–µ–º–∞—î URL (—â–æ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ –∑ –Ω–æ–≤–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º)
            if not formatted:
                formatted = "\n\n".join([f"üîπ {h['title']}" for h in headlines])
            
            await message.answer(f"üì∞ –¢–æ–ø –Ω–æ–≤–∏–Ω Bloomberg:\n\n{formatted}", disable_web_page_preview=True)
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –ú–æ–∂–ª–∏–≤–æ, —Å–∞–π—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∑–∞–ø–∏—Ç –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
            
    except Exception as e:
        LOG.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ /news: {e}")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—É, –∞–ª–µ –ø–æ–∫–∏ –≤–∏–≤–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")

# --- Webhook Handler —Ç–∞ –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞ ---

async def telegram_webhook_handler(request: web.Request):
    """–û–±—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î POST-–∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ Telegram."""
    try:
        # 1. –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
        data = await request.json()
        # 2. –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON –Ω–∞ –æ–±'—î–∫—Ç Update
        update = types.Update(**data)
        # 3. –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        await dp.feed_update(bot, update)
    except Exception as e:
        LOG.error(f"Error handling webhook: {e}")
    
    # Telegram –æ—á—ñ–∫—É—î 200 OK
    return web.Response()

async def on_startup(app: web.Application):
    """–î—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Webhook —É Telegram."""
    LOG.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    LOG.info("‚úÖ Webhook successfully set.")

async def on_shutdown(app: web.Application):
    """–î—ñ—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: –≤–∏–¥–∞–ª—è—î–º–æ Webhook."""
    LOG.info("Deleting webhook...")
    await bot.delete_webhook()
    LOG.info("‚úÖ Webhook successfully deleted.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É Webhook —Å–µ—Ä–≤–µ—Ä–∞."""
    
    # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ aiohttp
    app = web.Application()
    
    # 2. –î–æ–¥–∞—î–º–æ POST-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —à–ª—è—Ö—É /webhook/{TOKEN}
    app.router.add_post(WEBHOOK_PATH, telegram_webhook_handler)
    
    # 3. –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É/–∑—É–ø–∏–Ω–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # 4. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—Ç (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –±–µ—Ä–µ–º–æ PORT –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render)
    port = int(os.environ.get("PORT", 8080))
    
    LOG.info(f"üåê Starting web server on 0.0.0.0:{port}...")
    
    # 5. –ó–∞–ø—É—Å–∫–∞—î–º–æ aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()