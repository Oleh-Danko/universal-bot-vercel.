import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web 
# --- –î–û–î–ê–ù–Ü –ë–Ü–ë–õ–Ü–û–¢–ï–ö–ò –î–õ–Ø –ü–ê–†–°–ò–ù–ì–£ ---
import requests
from bs4 import BeautifulSoup
# ---------------------------------------

# üîë –¢–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render (—Ü–µ –±–µ–∑–ø–µ—á–Ω–æ)
TOKEN = os.environ.get("TOKEN") 

if not TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Render settings.")
    exit(1)

# –†–µ–∂–∏–º —Ä–æ–∑–±–æ—Ä—É Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. –Ø –Ω–µ —Å–ø–ª—é, –±–æ –º–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä!\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø—Ä–∞—Ü—é—î –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ (–∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º)."
    )

@dp.message(Command("news"))
async def news_command(message: types.Message):
    # --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê –ü–ê–†–°–ò–ù–ì–£ ---
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–¥—ñ–ª Markets –∑ Bloomberg
        url = "https://www.bloomberg.com/markets" # [cite: 2025-10-14]
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requests, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        response = requests.get(url)
        response.raise_for_status() # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ –±—É–ª–æ –ø–æ–º–∏–ª–æ–∫ HTTP
        
        # –†–æ–∑–±—ñ—Ä HTML –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é BeautifulSoup
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –ø–æ—à—É–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫–ª–∞—Å)
        # –ù–∞ Bloomberg –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Å—Ç–æ –º–∞—î –∫–ª–∞—Å 'headline' –∞–±–æ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ h1/h2
        headline_element = soup.find(['h1', 'h2'], class_='headline') or soup.find('h1')
        
        if headline_element:
            text = f"üì∞ –û—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∞ –∑ Bloomberg (Markets):\n{headline_element.text.strip()}"
        else:
            text = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ Bloomberg. (–ú–æ–∂–ª–∏–≤–æ, –∫–ª–∞—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–º—ñ–Ω–∏–≤—Å—è)."
        
        await message.answer(text)
        
    except requests.exceptions.RequestException as req_err:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ –¥–æ Bloomberg: {req_err}")
    except Exception as e:
        await message.answer(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
    # ---------------------------


# --- Web Server –¥–ª—è Render (—â–æ–± –Ω–µ –∑–∞—Å–∏–Ω–∞–≤) ---
# ... (–Ü–Ω—à–∏–π –∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...

async def handle_ping(request):
    """–ü—Ä–æ—Å—Ç–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—ñ–Ω–≥-–∑–∞–ø–∏—Ç—ñ–≤ Render"""
    return web.Response(text="I'm alive and ready to work!")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É, —è–∫–∏–π –æ—á—ñ–∫—É—î Render (PORT)"""
    # Render –ø–µ—Ä–µ–¥–∞—î –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è PORT
    port = int(os.environ.get("PORT", 8080)) 
    app = web.Application()
    app.router.add_get('/', handle_ping)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"‚úÖ Web server started on port {port}")

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —á–µ–∫–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await asyncio.gather(
        dp.start_polling(bot),
        start_web_server() # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    )

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())