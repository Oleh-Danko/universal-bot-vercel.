import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# === –ù–û–í–Ü –Ü–ú–ü–û–†–¢–ò (–ö–†–ò–¢–ò–ß–ù–û) ===
import html 
import asyncio # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è asyncio.to_thread, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ–±–ª–æ–∫—É—é—á–∏–º

# === –Ü–ú–ü–û–†–¢–ò –î–õ–Ø –§–£–ù–ö–¶–Ü–û–ù–ê–õ–£ ===
from rss_parser import fetch_rss_news 
from bloomberg_parser import fetch_bloomberg_news 

# === CONFIG & INIT ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("WebhookBot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is required")

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WEBHOOK_URL –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è (Render)
WEBHOOK_BASE = os.getenv("WEBHOOK_URL", "[https://universal-bot-live.onrender.com](https://universal-bot-live.onrender.com)")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === HANDLERS ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. –ù–∞–¥—ñ—à–ª—ñ—Ç—å /news –∞–±–æ /bloomberg, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥."
    )

@dp.message(Command("news"))
async def news_cmd(message: Message, bot: Bot):
    # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —á–µ–∫–∞–≤
    await message.answer("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ BBC (RSS)...")
    
    try:
        # RSS-–∞–¥—Ä–µ—Å–∞, —è–∫—É –º–∏ –±—É–¥–µ–º–æ –ø–∞—Ä—Å–∏—Ç–∏ (BBC World News)
        BBC_RSS_URL = "[http://feeds.bbci.co.uk/news/world/rss.xml](http://feeds.bbci.co.uk/news/world/rss.xml)" 
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π RSS-–ø–∞—Ä—Å–µ—Ä
        news_list = await fetch_rss_news(BBC_RSS_URL)

        if not news_list:
            await message.answer("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –¥–ª—è Markdown
        formatted_news = []
        for n in news_list:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Markdown –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å
            formatted_news.append(f"üì∞ *{n['title']}*\n[–ß–∏—Ç–∞—Ç–∏ –Ω–∞ BBC]({n['link']})")

        text = "\n\n".join(formatted_news)
        await message.answer(
            text, 
            parse_mode="Markdown", 
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")


# === –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –•–ï–ù–î–õ–ï–†: /bloomberg (–ù–ï–ë–õ–û–ö–£–Æ–ß–ò–ô) ===
@dp.message(Command("bloomberg"))
async def bloomberg_cmd(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /bloomberg, –æ—Ç—Ä–∏–º—É—é—á–∏ –¢–û–ü-10 –Ω–æ–≤–∏–Ω –∑ Bloomberg (–ø–∞—Ä—Å–∏–Ω–≥)."""
    
    # 1. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫
    await message.answer("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¢–û–ü-10 –Ω–æ–≤–∏–Ω –∑ Bloomberg...", 
                         parse_mode="HTML") 

    try:
        # 2. –ö–†–ò–¢–ò–ß–ù–û: –í–∏–∫–ª–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ aiogram
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.to_thread –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è blocking-–∫–æ–¥—É
        news_items = await asyncio.to_thread(fetch_bloomberg_news)
        
        if not news_items:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ Bloomberg. –ú–æ–∂–ª–∏–≤–æ, —Å–∞–π—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∑–∞–ø–∏—Ç –∞–±–æ –∑–º—ñ–Ω–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
            return

        # 3. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–∏–Ω
        response_messages = []
        for i, item in enumerate(news_items):
            # –ö–†–ò–¢–ò–ß–ù–û: –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ —É –∑–∞–≥–æ–ª–æ–≤–∫—É
            title = html.escape(item.get('title', ''))
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –Ω–æ–≤–∏–Ω—É: –Ω–æ–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ—Å–∏–ª–∞–Ω–Ω—è (Markdown-—Ñ–æ—Ä–º–∞—Ç)
            news_text = f"**{i + 1}.** *{title}*\n[–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é]({item['link']})"
            response_messages.append(news_text)
        
        text_to_send = "\n\n".join(response_messages)
        
        # 4. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await message.answer(
            f"üóûÔ∏è **–¢–û–ü {len(news_items)} –Ω–æ–≤–∏–Ω –∑ Bloomberg**:\n\n{text_to_send}",
            parse_mode="Markdown", 
            disable_web_page_preview=True 
        )

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤ bloomberg_cmd: %s", e)
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω Bloomberg. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# === STARTUP / SHUTDOWN (Async Operations) ===
async def on_startup(app):
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook successfully set.")

async def on_shutdown(app):
    # –í–∏–¥–∞–ª—è—î–º–æ webhook –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é
    logger.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚úÖ Shutdown complete.")

# === HEALTH CHECK ===
async def handle_health(request):
    return web.Response(text="‚úÖ OK", status=200)

# === MAIN (Synchronous Server Run) ===
def main():
    app = web.Application()

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ Webhook —Ç–∞ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # Health Check Endpoint
    app.router.add_get("/", handle_health)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π on_startup —Ç–∞ on_shutdown
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    logger.info("üåê Starting web server on 0.0.0.0:10000 ...")
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

if __name__ == "__main__":
    main()