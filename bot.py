import os
import asyncio
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from news_parser import collect_all_news  # <-- –Ω–∞—à –∂–∏–≤–∏–π –ø–∞—Ä—Å–µ—Ä

# ====== –õ–û–ì–ò ======
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("news-bot")

# ====== ENV ======
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_BASE = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä. https://universal-bot-live.onrender.com
if not BOT_TOKEN or not WEBHOOK_BASE:
    raise RuntimeError("BOT_TOKEN —ñ WEBHOOK_URL –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤ Environment.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# ====== BOT/DP (aiogram 3.x) ======
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ====== HANDLERS ======
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç. –ù–∞–¥—ñ—à–ª–∏ /news ‚Äî –æ—Ç—Ä–∏–º–∞—î—à —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ (–±–µ–∑ –∫–µ—à—É).")

@dp.message(Command("news"))
async def cmd_news(message: Message):
    await message.answer("–ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏‚Ä¶ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 5‚Äì15 —Å–µ–∫ (10 –¥–∂–µ—Ä–µ–ª).")

    try:
        news = await collect_all_news()  # –∂–∏–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ç
        if not news:
            await message.answer("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É.")
            return

        # –≤—ñ–¥—Å–æ—Ä—Ç—É—î–º–æ (—Å–ø–æ—á–∞—Ç–∫—É –∑–∞ –¥–∂–µ—Ä–µ–ª–æ–º, –ø–æ—Ç—ñ–º –∑–∞ –Ω–∞–∑–≤–æ—é) ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ –≤–∏–≤–æ–¥—É
        news.sort(key=lambda x: (x["source"], x["title"]))

        # —á–∞–Ω–∫—É—î–º–æ –ø—ñ–¥ –ª—ñ–º—ñ—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞
        CHUNK_LIMIT = 3900  # –∑–∞–ø–∞—Å –¥–æ 4096
        buf = ""
        current_source = None
        sent = 0

        async def flush():
            nonlocal buf, sent
            if buf.strip():
                await message.answer(buf, disable_web_page_preview=True)
                await asyncio.sleep(0.25)
                buf = ""

        for item in news:
            src = item["source"]
            if src != current_source:
                block_header = f"\n\n‚Äî <b>{src}</b> ‚Äî\n"
            else:
                block_header = ""
            line = f"‚Ä¢ <a href='{item['link']}'>{item['title']}</a>\n"
            to_add = block_header + line

            if len(buf) + len(to_add) > CHUNK_LIMIT:
                await flush()
            if src != current_source and len(block_header) > 0 and len(block_header) > CHUNK_LIMIT:
                # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∞–±—Å—É—Ä–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
                pass
            buf += to_add
            current_source = src
            sent += 1

        await flush()
        await message.answer(f"–ì–æ—Ç–æ–≤–æ. –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –Ω–æ–≤–∏–Ω.")

    except Exception as e:
        log.exception("–ü–æ–º–∏–ª–∫–∞ –≤ /news: %s", e)
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")

# ====== HEALTH ======
async def handle_health(request):
    return web.Response(text="OK", status=200)

# ====== START/STOP ======
async def on_startup(app: web.Application):
    log.info(f"üåê Starting bot, setting webhook to {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)
    log.info("‚úÖ Webhook set successfully")

async def on_shutdown(app: web.Application):
    log.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()
    log.info("‚úÖ Shutdown complete")

# ====== MAIN ======
def main():
    app = web.Application()

    # —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è aiogram –Ω–∞ aiohttp
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # healthcheck –¥–ª—è Render
    app.router.add_get("/", handle_health)
    app.router.add_get("/healthz", handle_health)

    port = int(os.environ.get("PORT", "10000"))
    log.info(f"üöÄ Starting web server on 0.0.0.0:{port}")
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()