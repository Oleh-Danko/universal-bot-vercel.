import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiohttp import web # ‚úÖ –Ü–ú–ü–û–†–¢ –î–õ–Ø WEB-–°–ï–†–í–ï–†–ê
import requests # –ó–∞–ª–∏—à–µ–Ω–æ, —Ö–æ—á–∞ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
from bs4 import BeautifulSoup # –ó–∞–ª–∏—à–µ–Ω–æ, —Ö–æ—á–∞ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
# ---------------------------------------

# –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢: –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–∞—Ä—Å–µ—Ä
from bloomberg_parser import fetch_bloomberg 

# üîë –¢–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render
TOKEN = os.environ.get("TOKEN") 

if not TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Render settings.")
    exit(1)

# –†–µ–∂–∏–º —Ä–æ–∑–±–æ—Ä—É Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Render. –Ø –Ω–µ —Å–ø–ª—é, –±–æ –º–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä!\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /news, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø—Ä–∞—Ü—é—î –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ (–∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º)."
    )

@dp.message(Command("news"))
async def news_command(message: types.Message):
    await message.answer("‚è≥ –û—Ç—Ä–∏–º—É—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –∑ Bloomberg...")
    try:
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ fetch_bloomberg –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤, –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫/None
        titles = await fetch_bloomberg() 
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –Ω–æ–≤–∏–Ω–∏
        if titles and isinstance(titles, list):
            formatted = "\n\n".join([f"üîπ {t}" for t in titles])
            await message.answer(f"üì∞ –¢–æ–ø –Ω–æ–≤–∏–Ω Bloomberg:\n\n{formatted}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –ú–æ–∂–ª–∏–≤–æ, Bloomberg –∑–∞–±–ª–æ–∫—É–≤–∞–≤ IP.")
            
    except Exception as e:
        # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥—É—Ç—å –∞–¥–º—ñ–Ω—É
        await message.answer("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É.")
        # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó send_admin_alert(f"–ü–æ–º–∏–ª–∫–∞ –≤ /news: {e}"), —è–∫—â–æ –≤–æ–Ω–∞ —î —É –∫–æ–¥—ñ

# --- Web Server –¥–ª—è Render (—â–æ–± –Ω–µ –∑–∞—Å–∏–Ω–∞–≤) ---

async def handle_ping(request):
    """–ü—Ä–æ—Å—Ç–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—ñ–Ω–≥-–∑–∞–ø–∏—Ç—ñ–≤ Render"""
    return web.Response(text="I'm alive and ready to work!")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É, —è–∫–∏–π –æ—á—ñ–∫—É—î Render (PORT)"""
    # Render –ø–µ—Ä–µ–¥–∞—î –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è PORT
    # –¶–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è Health Check
    port = int(os.environ.get("PORT", 8080)) 
    app = web.Application()
    app.router.add_get('/', handle_ping)
    runner = web.AppRunner(app)
    await runner.setup()
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∞–π—Ç
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"‚úÖ Web server started on port {port}")
    
    # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    while True:
        await asyncio.sleep(3600) # –ß–µ–∫–∞—î–º–æ 1 –≥–æ–¥–∏–Ω—É

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —á–µ–∫–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await asyncio.gather(
        dp.start_polling(bot),
        start_web_server() # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    )

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())